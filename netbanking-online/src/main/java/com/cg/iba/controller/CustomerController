package com.cg.iba.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cg.iba.entities.Customer;
import com.cg.iba.service.ICustomerService;
import com.cg.iba.exception.DetailsNotFoundException;
import com.cg.iba.exception.InvalidDetailsException;

/**
 * 
 * @author Dileep
 * @version 1.0
 *
 */
@RestController
@RequestMapping("/customer")
public class CustomerController {
	@Autowired
	ICustomerService ics;

	@PostMapping("/add")
	public List<Customer> addCustomer(@RequestBody Customer customer) throws InvalidDetailsException {
		List<Customer> n = null;
		try {
			n = ics.addCustomer(customer);
		} catch (Exception e) {
			throw new InvalidDetailsException("The details given are not valid!");
		}
		return n;

	}

	@PutMapping("/update")
	public List<Customer> updateCustomer(@RequestBody Customer customer) throws InvalidDetailsException {
		List<Customer> n = null;
		try {
			n = ics.updateCustomer(customer);
		} catch (Exception e) {
			throw new InvalidDetailsException("The details given are not valid!");
		}
		return n;
	}

	@DeleteMapping("/delete/{customerId}")
	public List<Customer> deleteCustomer(@PathVariable long customerId) throws DetailsNotFoundException {
		List<Customer> n = null;
		try {
			n = ics.deleteCustomer(customerId);
		} catch (Exception e) {
			throw new DetailsNotFoundException("The given ID is not found!");
		}
		return n;

	}

	@GetMapping("/find/{customerId}")
	public Customer findCustomerById(@PathVariable long customerId) throws DetailsNotFoundException {
		Customer n = null;
		try {
			n = ics.findCustomerById(customerId);
		} catch (Exception e) {
			throw new DetailsNotFoundException("The given ID is not found!");
		}
		return n;

	}

}
